# Default values for hermes.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

#
# SCiMMA Auth (Hop Auth, scimma-admin) config
#
hopAuthBaseUrl: https://my.hop.scimma.org/hopauth

djangoDebug: true
saveTestMessages: true

gunicornWorkers: 2
gunicornTimeout: 300

replicaCount: 1

image:
  repository: "docker.lco.global/hermes"
  tag: stable
  pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

brokers:
  gcnClassicOverKafka:
    groupId: 'hermes-dev'
  hopskotch:
    groupId: 'hermes-dev'

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podSecurityContext:
  fsGroup: 1000

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths: []

  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# Name of the v1/Secret to source env vars from
hermesSecretName: "hermes-secrets"

# Settings for the PostgreSQL database
applyDatabaseMigrations: true

# If false DB_PASS is sourced from hermesSecret
useDockerizedDatabase: true

cacheBackend: "django.core.cache.backends.redis.RedisCache"

djangoDatabaseEngine: "django.db.backends.postgresql"
postgresql:
  client:
    TLSMode: "prefer"

  auth:
    username: "postgres"
    password: "changeme"

    # This password is for the default "postgres" user, compared to the previous
    # one which is for the custom "username" (which can be different).
    # Either way, both must be set. And if username=postgres, then both password
    # should be the same.
    postgresPassword: "changeme"
    database: "hermes"
  primary:
    initdb:
      scripts:
        init_postgis.sh: |
          #!/bin/sh
          PGPASSWORD=$POSTGRES_PASSWORD psql -U postgres -c "create extension if not exists postgis;"
    service:
      port:
        postgresql: "5432"
    resources:
      requests:
        cpu: 50m
        memory: 256Mi
      limits:
        cpu: 400m
        memory: 512Mi

# If not set it's sourced from the key SECRET_KEY in a v1/Secret with a name of hermesSecret
secretKey: "changeme"

# For tns connection and submission
tns:
  baseUrl: "https://sandbox.wis-tns.org/"
  botName: "Hermes_bot"

gcn:
  baseUrl: "https://test.gcn.nasa.gov/"

redis:
  # If enabled, an in-cluster Redis instance will be spun up.
  # Otherwise, redisURL will be used.
  enabled: true
  usePassword: false
  master:
    port: "6379"
    disableCommands: ["FLUSHALL"]
    persistence:
      enabled: true
      size: 512Mi
    resources:
      requests:
        cpu: 50m
        memory: 128Mi
      limits:
        cpu: 250m
        memory: 512Mi
  cluster:
    enabled: false
  configmap: |-
    maxmemory 512mb
    maxmemory-policy volatile-lru
    # idle client timeout after 600 seconds
    timeout 600

# NGINX container configuration
nginx:
  image:
    repository: "nginx"
    tag: "1.16-alpine"
    pullPolicy: IfNotPresent
  resources:
    requests:
      cpu: 10m
      memory: 32Mi
    limits:
      cpu: 500m
      memory: 128Mi

loadInitialData:
  enabled: false

nodeSelector: {}

tolerations: []

affinity: {}
