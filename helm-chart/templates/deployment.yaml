apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "hermes.fullname" . }}
  labels:
{{ include "hermes.labels" . | indent 4 }}
    app.kubernetes.io/component: "backend"
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "hermes.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/component: "backend"
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "hermes.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: "backend"
    spec:
      initContainers:
        # wait for database to become ready
        - name: check-db-ready
          image: "postgres:11.2-alpine"
          imagePullPolicy: IfNotPresent
          command:
            - sh
            - -c
            - >
              until pg_isready \
                  --username={{ .Values.postgresql.auth.username | quote }} \
                  --dbname={{ .Values.postgresql.auth.database | quote }} \
                  --host={{ include "hermes.dbhost" . | quote }} \
                  --port={{ .Values.postgresql.primary.service.port.postgresql | quote }};
                do echo waiting for database;
                sleep 2;
                done;
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            readOnlyRootFilesystem: true
          resources:
            requests:
              cpu: 50m
              memory: 16Mi
            limits:
              cpu: 50m
              memory: 16Mi
        {{- if .Values.applyDatabaseMigrations }}
        - name: apply-db-migrations
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - python
            - manage.py
            - migrate
            - --no-input
          env:
            {{- include "hermes.backendEnv" . | nindent 12 }}
          envFrom:
            - secretRef:
                name: {{ .Values.hermesSecretName }}
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            readOnlyRootFilesystem: true
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: tmp
              mountPath: /tmp
              readOnly: false
        {{- end }}

    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      serviceAccountName: {{ template "hermes.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - gunicorn
            - --bind=0.0.0.0:8080
            - --worker-class=gevent
            - --workers={{ .Values.gunicornWorkers | default 2 }}
            - --timeout={{ .Values.gunicornTimeout | default 300 }}
            - --access-logfile=-
            - --error-logfile=-
            - hermes_base.wsgi
          env:
            {{ include "hermes.extraEnv" . | nindent 12 }}
            {{ include "hermes.backendEnv" . | nindent 12 }}
          envFrom:
            - secretRef:
                name: {{ .Values.hermesSecretName }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 10
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: app-configuration
              mountPath: /hermes/static
              readOnly: false
            - name: tmp
              mountPath: /tmp
              readOnly: false
      volumes:
        - name: app-configuration
          configMap:
            name: {{ include "hermes.fullname" . }}
        - name: tmp
          emptyDir:
            medium: Memory
            sizeLimit: 16Mi
        - name: specutils
          emptyDir:
            medium: Memory
            sizeLimit: 16Mi
        - name: astropy
          emptyDir:
            medium: Memory
            sizeLimit: 16Mi

      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
